import logging
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import os
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN"))
DB_PATH = "booking.db"
TIME_SLOT_DURATION = 30  # –º–∏–Ω—É—Ç
WORK_START_HOUR = 10
WORK_END_HOUR = 20
PAYMENT_TIMEOUT_MINUTES = 15  # —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å, –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
(
    SELECT_SPECIALIZATION,
    SELECT_DIRECTION,
    SELECT_INSTRUMENT,
    SELECT_DATE,
    SELECT_TIME,
    CONFIRM_BOOKING,
    PAYMENT_WAIT,
    ADMIN_SELECT_SPEC,
    ADMIN_SELECT_DIR,
    ADMIN_SELECT_INSTRUMENT,
    ADMIN_SELECT_DATE,
    ADMIN_SELECT_TIME,
    WAIT_PRICE_INPUT,
) = range(13)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
import os
DB_PATH = os.path.join(os.path.dirname(__file__), "booking.db")

def init_db():
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—É—Ç–∏: {os.path.abspath(DB_PATH)}")  # üëà –í–´–í–û–î –ü–£–¢–ò!
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            specialization TEXT,
            direction TEXT,
            instrument TEXT,
            date TEXT,
            time_slot TEXT,
            status TEXT DEFAULT 'pending_payment',
            payment_id TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            paid_at DATETIME,
            price REAL NOT NULL DEFAULT 800.0
        )
    ''')

    c.execute('''
        CREATE TABLE IF NOT EXISTS prices (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            specialization TEXT UNIQUE,
            direction TEXT UNIQUE,
            price REAL NOT NULL DEFAULT 800.0
        )
    ''')

    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            language_code TEXT,
            joined_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    default_prices = [
        ('solo', 'percussion', 800.0),
        ('solo', 'strings', 800.0),
        ('solo', 'brass', 800.0),
        ('solo', 'piano', 800.0),
        ('solo', 'vocal', 800.0),
        ('solo', 'mix', 800.0),

        ('duet', 'percussion', 1200.0),
        ('duet', 'strings', 1200.0),
        ('duet', 'brass', 1200.0),
        ('duet', 'piano', 1200.0),
        ('duet', 'vocal', 1200.0),
        ('duet', 'mix', 1200.0),

        ('ensemble', 'percussion', 1500.0),
        ('ensemble', 'strings', 1500.0),
        ('ensemble', 'brass', 1500.0),
        ('ensemble', 'piano', 1500.0),
        ('ensemble', 'vocal', 1500.0),
        ('ensemble', 'mix', 1500.0),
    ]

    for spec, dir, price in default_prices:
        c.execute('''
            INSERT OR IGNORE INTO prices (specialization, direction, price)
            VALUES (?, ?, ?)
        ''', (spec, dir, price))

    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")


# --- –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é ---
def get_price(spec: str, dir: str) -> float:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute('SELECT price FROM prices WHERE specialization = ? AND direction = ?', (spec, dir))
    row = c.fetchone()
    conn.close()
    return row['price'] if row else 800.0


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞ ---
def is_slot_available(date_str: str, time_slot: str) -> bool:
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        SELECT COUNT(*) FROM bookings 
        WHERE date = ? AND time_slot = ? AND status IN ('confirmed', 'pending_payment')
    ''', (date_str, time_slot))
    count = c.fetchone()[0]
    conn.close()
    return count == 0


# --- –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –¥–∞—Ç—É ---
def get_available_slots(date_str: str) -> list:
    slots = []
    for hour in range(WORK_START_HOUR, WORK_END_HOUR):
        for minute in [0, 30]:
            slot_time = f"{hour:02d}:{minute:02d}"
            if is_slot_available(date_str, slot_time):
                slots.append(slot_time)
    return slots


# --- –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±—Ä–æ–Ω—å ---
def save_booking(user_id: int, spec: str, dir: str, inst: str, date: str, time_slot: str, status='pending_payment'):
    price = get_price(spec, dir)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT INTO bookings (user_id, specialization, direction, instrument, date, time_slot, status, price)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, spec, dir, inst, date, time_slot, status, price))
    booking_id = c.lastrowid
    conn.commit()
    conn.close()
    return booking_id


# --- –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ ---
def update_booking_status(booking_id: int, status: str, payment_id: str = None):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    if status == "confirmed":
        c.execute('''
            UPDATE bookings SET status = ?, paid_at = CURRENT_TIMESTAMP WHERE id = ?
        ''', (status, booking_id))
    else:
        c.execute('''
            UPDATE bookings SET status = ? WHERE id = ?
        ''', (status, booking_id))
    conn.commit()
    conn.close()


# --- –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω—å –ø–æ ID ---
def get_booking_by_id(booking_id: int) -> Optional[dict]:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute('SELECT * FROM bookings WHERE id = ?', (booking_id,))
    row = c.fetchone()
    conn.close()
    return dict(row) if row else None


# --- –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ ---
def cleanup_expired_bookings():
    timeout = datetime.now() - timedelta(minutes=PAYMENT_TIMEOUT_MINUTES)
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        UPDATE bookings SET status = 'expired' 
        WHERE status = 'pending_payment' AND created_at < ?
    ''', (timeout.strftime('%Y-%m-%d %H:%M:%S'),))
    conn.commit()
    conn.close()
    logger.info("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ –æ—á–∏—â–µ–Ω—ã.")


# --- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å ---
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    booking_id = job.data['booking_id']
    booking = get_booking_by_id(booking_id)
    if not booking or booking['status'] != 'confirmed':
        return

    user_id = booking['user_id']
    date = booking['date']
    time_slot = booking['time_slot']
    direction = booking['direction']
    instrument = booking.get('instrument') or ''

    text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\nüìÖ {date}\n‚è∞ {time_slot}\nüéØ {direction}"
    if instrument:
        text += f" ({instrument})"
    text += "\n\nüìç –ê–¥—Ä–µ—Å: —É–ª. –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è, –¥. 5, –∫–∞–±. 203\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: +7 (XXX) XXX-XX-XX\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç!"

    try:
        await context.bot.send_message(chat_id=user_id, text=text)
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –±—Ä–æ–Ω–∏ #{booking_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or ""
    first_name = user.first_name or ""
    language_code = user.language_code or ""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT OR IGNORE INTO users (user_id, username, first_name, language_code)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, language_code))
    conn.commit()
    conn.close()

    keyboard = [[InlineKeyboardButton("üéπ –í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é", callback_data='select_spec')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è!\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –ø–æ –ª—é–±–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É ‚Äî —Å–æ–ª–æ, –¥—É—ç—Ç –∏–ª–∏ –∞–Ω—Å–∞–º–±–ª—å.\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=reply_markup
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ---
async def select_specialization(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] select_specialization –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üéº –°–æ–ª–æ", callback_data='spec_solo')],
        [InlineKeyboardButton("üíû –î—É—ç—Ç", callback_data='spec_duet')],
        [InlineKeyboardButton("üéª –ê–Ω—Å–∞–º–±–ª—å (3+)", callback_data='spec_ensemble')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=reply_markup
    )
    return SELECT_SPECIALIZATION


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
async def select_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] select_direction –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    spec = query.data.split('_')[1]  # spec_solo ‚Üí 'solo'
    context.user_data['specialization'] = spec

    keyboard = [
        [InlineKeyboardButton("ü•Å –£–¥–∞—Ä–Ω—ã–µ", callback_data='dir_percussion')],
        [InlineKeyboardButton("üéª –°—Ç—Ä—É–Ω–Ω—ã–µ", callback_data='dir_strings')],
        [InlineKeyboardButton("üé∑ –î—É—Ö–æ–≤—ã–µ", callback_data='dir_brass')],
        [InlineKeyboardButton("üéπ –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ", callback_data='dir_piano')],
        [InlineKeyboardButton("üé§ –í–æ–∫–∞–ª", callback_data='dir_vocal')],
        [InlineKeyboardButton("üé∂ –ú–∏–∫—Å", callback_data='dir_mix')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )
    return SELECT_DIRECTION


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —É–¥–∞—Ä–Ω—ã–µ) ---
async def select_instrument(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] select_instrument –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    direction = query.data.split('_')[1]  # dir_percussion ‚Üí 'percussion'
    context.user_data['direction'] = direction

    if direction == 'percussion':
        keyboard = [
            [InlineKeyboardButton("ü•Å –ë–∞—Ä–∞–±–∞–Ω—ã", callback_data='inst_drums')],
            [InlineKeyboardButton("ü•Å –ü–µ—Ä–∫—É—Å—Å–∏—è", callback_data='inst_percc')],
            [InlineKeyboardButton("ü•Å –¢–∏–º–ø–∞–Ω—ã", callback_data='inst_timpani')],
            [InlineKeyboardButton("ü•Å –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É–¥–∞—Ä–Ω—ã–µ", callback_data='inst_electronic')],
            [InlineKeyboardButton("ü•Å –í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ", callback_data='inst_all')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
            reply_markup=reply_markup
        )
        return SELECT_INSTRUMENT
    else:
        context.user_data['instrument'] = None
        await select_date(update, context)
        return SELECT_DATE


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞) ---
async def handle_instrument_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] handle_instrument_choice –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    instrument = query.data.split('_')[1]
    context.user_data['instrument'] = instrument
    await select_date(update, context)
    return SELECT_DATE


# --- –ö–∞–ª–µ–Ω–¥–∞—Ä—å (–≤—ã–±–æ—Ä –¥–∞—Ç—ã) ---
async def select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] select_date –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    today = datetime.today()
    dates = []
    for i in range(14):
        d = today + timedelta(days=i)
        date_str = d.strftime('%Y-%m-%d')
        dates.append((d.strftime('%d.%m'), date_str))

    keyboard = []
    row = []
    for label, date_str in dates:
        available_slots = get_available_slots(date_str)
        if available_slots:
            row.append(InlineKeyboardButton(label, callback_data=f'date_{date_str}'))
        else:
            row.append(InlineKeyboardButton(f"{label} üö´", callback_data='ignore'))

        if len(row) == 3:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='back_to_dir')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=reply_markup
    )
    return SELECT_DATE


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ---
async def handle_date_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] handle_date_choice –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    if query.data == 'back_to_dir':
        await select_direction(update, context)
        return SELECT_DIRECTION

    if query.data.startswith('date_'):
        date_str = query.data.split('_')[1]
        context.user_data['selected_date'] = date_str

        slots = get_available_slots(date_str)
        if not slots:
            await query.edit_message_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
            return SELECT_DATE

        keyboard = []
        for slot in slots:
            keyboard.append([InlineKeyboardButton(slot, callback_data=f'time_{slot}')])

        keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data='back_to_dates')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
        return SELECT_TIME


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ ---
async def handle_time_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] handle_time_choice –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    if query.data == 'back_to_dates':
        await select_date(update, context)
        return SELECT_DATE

    if query.data.startswith('time_'):
        time_slot = query.data.split('_')[1]
        context.user_data['selected_time'] = time_slot

        spec = context.user_data['specialization']
        dir = context.user_data['direction']
        inst = context.user_data.get('instrument') or ''
        date = context.user_data['selected_date']

        booking_id = save_booking(
            user_id=query.from_user.id,
            spec=spec,
            dir=dir,
            inst=inst,
            date=date,
            time_slot=time_slot
        )
        context.user_data['booking_id'] = booking_id

        booking = get_booking_by_id(booking_id)
        price = booking['price']

        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {time_slot}\n"
            f"üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {'–°–æ–ª–æ' if spec=='solo' else '–î—É—ç—Ç' if spec=='duet' else '–ê–Ω—Å–∞–º–±–ª—å'} | {dir}"
        )

        if inst:
            text += f"\nüé∏ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {inst}"

        text += f"\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n\n"
        text += f"[–û–ø–ª–∞—Ç–∏—Ç—å {price}‚ÇΩ](https://example.com/pay?booking={booking_id})\n\n"
        text += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å–ª–æ—Ç –±—É–¥–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç ‚Äî –º–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è."

        keyboard = [
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='confirm_payment')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_booking')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

        return CONFIRM_BOOKING


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã ---
async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] confirm_payment –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    booking_id = context.user_data.get('booking_id')
    if not booking_id:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –±—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    update_booking_status(booking_id, "confirmed")
    booking = get_booking_by_id(booking_id)

    booking_datetime = datetime.strptime(f"{booking['date']} {booking['time_slot']}", "%Y-%m-%d %H:%M")
    reminder_time = booking_datetime - timedelta(hours=1)
    now = datetime.now()
    delay = (reminder_time - now).total_seconds()

    if delay > 0:
        context.job_queue.run_once(send_reminder, when=delay, data={'booking_id': booking_id})

    await query.edit_message_text(
        f"‚úÖ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù–û!\n\n"
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
        f"üìÖ {booking['date']}\n"
        f"‚è∞ {booking['time_slot']}\n"
        f"üéØ {booking['direction']}"
        f"{f' ({booking["instrument"]})' if booking['instrument'] else ''}\n\n"
        f"üìç –ê–¥—Ä–µ—Å: —É–ª. –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è, –¥. 5, –∫–∞–±. 203\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +7 (XXX) XXX-XX-XX\n\n"
        f"–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!\n\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å ‚ù§Ô∏è"
    )


# --- –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏ ---
async def cancel_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] cancel_booking –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    booking_id = context.user_data.get('booking_id')
    if booking_id:
        update_booking_status(booking_id, "cancelled")
        context.user_data.clear()

    keyboard = [[InlineKeyboardButton("üéπ –í—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é", callback_data='select_spec')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "‚ùå –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω.\n\n"
        "–•–æ—á–µ—à—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è? –í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )
    return SELECT_SPECIALIZATION


# --- –ö–æ–º–∞–Ω–¥–∞ /mybookings ---
async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute('''
        SELECT date, time_slot, direction, instrument, status 
        FROM bookings 
        WHERE user_id = ? AND status IN ('confirmed', 'pending_payment') 
        ORDER BY date, time_slot
    ''', (user_id,))
    rows = c.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.")
        return

    text = "üìã –í–∞—à–∏ –±—Ä–æ–Ω–∏:\n\n"
    for row in rows:
        status_emoji = "‚úÖ" if row['status'] == 'confirmed' else "‚è≥"
        inst_text = f" ({row['instrument']})" if row['instrument'] else ""
        text += f"{status_emoji} {row['date']} {row['time_slot']} ‚Äî {row['direction']}{inst_text}\n"

    await update.message.reply_text(text)


# --- –ö–æ–º–∞–Ω–¥–∞ /admin ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text(
            "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return  # üëà –ù–ò–ß–ï–ì–û –ù–ï –í–´–í–û–î–ò–ú ‚Äî –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –í–ò–î–ò–¢ –ú–ï–ù–Æ!

    # üëá –¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ê ‚Äî –ü–û–ö–ê–ó–´–í–ê–ï–ú –ú–ï–ù–Æ
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π", callback_data='admin_view_bookings')],
        [InlineKeyboardButton("‚ûï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –æ–ø–ª–∞—Ç—ã", callback_data='admin_create_booking')],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data='admin_change_price')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


# --- –ê–¥–º–∏–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π ---
async def admin_view_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_view_bookings –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    c = conn.cursor()
    c.execute('''
        SELECT 
            b.id, 
            u.username, 
            b.specialization, 
            b.direction, 
            b.instrument, 
            b.date, 
            b.time_slot, 
            b.status
        FROM bookings b
        LEFT JOIN (SELECT DISTINCT user_id, username FROM users) u ON b.user_id = u.user_id
        ORDER BY b.date DESC, b.time_slot DESC
    ''')
    rows = c.fetchall()
    conn.close()

    if not rows:
        await query.edit_message_text("üì≠ –ù–µ—Ç –±—Ä–æ–Ω–µ–π.")
        return

    text = "üìã –í—Å–µ –±—Ä–æ–Ω–∏:\n\n"
    for row in rows:
        username = row['username'] if row['username'] is not None else f"ID:{row['user_id']}"
        status_emoji = "‚úÖ" if row['status'] == 'confirmed' else "‚è≥" if row['status'] == 'pending_payment' else "‚ùå"
        instrument = row['instrument'] if 'instrument' in row and row['instrument'] is not None else ""
        inst_text = f" ({instrument})" if instrument else ""

        text += f"{status_emoji} {row['date']} {row['time_slot']} ‚Äî {row['specialization']} | {row['direction']}{inst_text}\n"
        text += f"   üë§ {username}\n"

    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data='admin_back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)


# --- –ê–¥–º–∏–Ω: –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏ ---
async def admin_start_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_start_booking –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üéº –°–æ–ª–æ", callback_data='admin_spec_solo')],
        [InlineKeyboardButton("üíû –î—É—ç—Ç", callback_data='admin_spec_duet')],
        [InlineKeyboardButton("üéª –ê–Ω—Å–∞–º–±–ª—å (3+)", callback_data='admin_spec_ensemble')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=reply_markup
    )
    return ADMIN_SELECT_SPEC


# --- –ê–¥–º–∏–Ω: –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
async def admin_select_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_select_direction –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    spec = query.data.split('_')[2]  # admin_spec_solo ‚Üí 'solo'
    context.user_data['admin_spec'] = spec

    keyboard = [
        [InlineKeyboardButton("ü•Å –£–¥–∞—Ä–Ω—ã–µ", callback_data='admin_dir_percussion')],
        [InlineKeyboardButton("üéª –°—Ç—Ä—É–Ω–Ω—ã–µ", callback_data='admin_dir_strings')],
        [InlineKeyboardButton("üé∑ –î—É—Ö–æ–≤—ã–µ", callback_data='admin_dir_brass')],
        [InlineKeyboardButton("üéπ –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ", callback_data='admin_dir_piano')],
        [InlineKeyboardButton("üé§ –í–æ–∫–∞–ª", callback_data='admin_dir_vocal')],
        [InlineKeyboardButton("üé∂ –ú–∏–∫—Å", callback_data='admin_dir_mix')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=reply_markup
    )
    return ADMIN_SELECT_DIR


# --- –ê–¥–º–∏–Ω: –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–µ—Å–ª–∏ —É–¥–∞—Ä–Ω—ã–µ) ---
async def admin_select_instrument(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_select_instrument –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    direction = query.data.split('_')[2]  # admin_dir_percussion ‚Üí 'percussion'
    context.user_data['admin_dir'] = direction

    if direction == 'percussion':
        keyboard = [
            [InlineKeyboardButton("ü•Å –ë–∞—Ä–∞–±–∞–Ω—ã", callback_data='admin_inst_drums')],
            [InlineKeyboardButton("ü•Å –ü–µ—Ä–∫—É—Å—Å–∏—è", callback_data='admin_inst_percc')],
            [InlineKeyboardButton("ü•Å –¢–∏–º–ø–∞–Ω—ã", callback_data='admin_inst_timpani')],
            [InlineKeyboardButton("ü•Å –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —É–¥–∞—Ä–Ω—ã–µ", callback_data='admin_inst_electronic')],
            [InlineKeyboardButton("ü•Å –í—Å–µ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–µ", callback_data='admin_inst_all')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
            reply_markup=reply_markup
        )
        return ADMIN_SELECT_INSTRUMENT
    else:
        context.user_data['admin_inst'] = None
        await admin_select_date(update, context)
        return ADMIN_SELECT_DATE


# --- –ê–¥–º–∏–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ---
async def admin_handle_instrument_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_handle_instrument_choice –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    instrument = query.data.split('_')[2]
    context.user_data['admin_inst'] = instrument
    await admin_select_date(update, context)
    return ADMIN_SELECT_DATE


# --- –ê–¥–º–∏–Ω: –≤—ã–±–æ—Ä –¥–∞—Ç—ã ---
async def admin_select_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_select_date –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    today = datetime.today()
    dates = []
    for i in range(14):
        d = today + timedelta(days=i)
        date_str = d.strftime('%Y-%m-%d')
        dates.append((d.strftime('%d.%m'), date_str))

    keyboard = []
    row = []
    for label, date_str in dates:
        row.append(InlineKeyboardButton(label, callback_data=f'admin_date_{date_str}'))
        if len(row) == 3:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='admin_back_to_spec')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=reply_markup
    )
    return ADMIN_SELECT_DATE


# --- –ê–¥–º–∏–Ω: –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ---
async def admin_handle_date_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_handle_date_choice –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    if query.data == 'admin_back_to_spec':
        await admin_start_booking(update, context)
        return ADMIN_SELECT_SPEC

    if query.data.startswith('admin_date_'):
        date_str = query.data.split('_')[2]
        context.user_data['admin_date'] = date_str

        slots = get_available_slots(date_str)
        if not slots:
            await query.edit_message_text("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            return ADMIN_SELECT_DATE

        keyboard = []
        for slot in slots:
            keyboard.append([InlineKeyboardButton(slot, callback_data=f'admin_time_{slot}')])

        keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data='admin_back_to_date')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"üîπ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {date_str}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=reply_markup
        )
        return ADMIN_SELECT_TIME


# --- –ê–¥–º–∏–Ω: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏ –±–µ–∑ –æ–ø–ª–∞—Ç—ã ---
async def admin_handle_time_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_handle_time_choice –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    if query.data == 'admin_back_to_date':
        await admin_select_date(update, context)
        return ADMIN_SELECT_DATE

    if query.data.startswith('admin_time_'):
        time_slot = query.data.split('_')[2]
        spec = context.user_data['admin_spec']
        dir = context.user_data['admin_dir']
        inst = context.user_data.get('admin_inst') or ''
        date = context.user_data['admin_date']

        booking_id = save_booking(
            user_id=ADMIN_ID,
            spec=spec,
            dir=dir,
            inst=inst,
            date=date,
            time_slot=time_slot,
            status='confirmed'
        )
        price = get_price(spec, dir)

        text = (
            f"‚úÖ –ê–î–ú–ò–ù –ë–†–û–ù–ò–†–û–í–ê–õ –ë–ï–ó –û–ü–õ–ê–¢–´!\n\n"
            f"üìÖ {date}\n"
            f"‚è∞ {time_slot}\n"
            f"üéØ {spec} | {dir}"
            f"{f' ({inst})' if inst else ''}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
            f"üë§ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª: –ê–¥–º–∏–Ω"
        )

        keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data='admin_back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup)
        return ConversationHandler.END


# --- –ê–¥–º–∏–Ω: –≤—ã–±—Ä–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –ø–∞—Ä—ã (—Å–ø–µ—Ü + –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) ---
async def admin_change_price_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_change_price_menu –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üéº –°–æ–ª–æ ‚Äî –£–¥–∞—Ä–Ω—ã–µ", callback_data='admin_price_solo_percussion')],
        [InlineKeyboardButton("üéº –°–æ–ª–æ ‚Äî –°—Ç—Ä—É–Ω–Ω—ã–µ", callback_data='admin_price_solo_strings')],
        [InlineKeyboardButton("üéº –°–æ–ª–æ ‚Äî –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ", callback_data='admin_price_solo_piano')],
        [InlineKeyboardButton("üéº –°–æ–ª–æ ‚Äî –í–æ–∫–∞–ª", callback_data='admin_price_solo_vocal')],
        [InlineKeyboardButton("üéº –°–æ–ª–æ ‚Äî –ú–∏–∫—Å", callback_data='admin_price_solo_mix')],

        [InlineKeyboardButton("üíû –î—É—ç—Ç ‚Äî –£–¥–∞—Ä–Ω—ã–µ", callback_data='admin_price_duet_percussion')],
        [InlineKeyboardButton("üíû –î—É—ç—Ç ‚Äî –°—Ç—Ä—É–Ω–Ω—ã–µ", callback_data='admin_price_duet_strings')],
        [InlineKeyboardButton("üíû –î—É—ç—Ç ‚Äî –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ", callback_data='admin_price_duet_piano')],
        [InlineKeyboardButton("üíû –î—É—ç—Ç ‚Äî –í–æ–∫–∞–ª", callback_data='admin_price_duet_vocal')],
        [InlineKeyboardButton("üíû –î—É—ç—Ç ‚Äî –ú–∏–∫—Å", callback_data='admin_price_duet_mix')],

        [InlineKeyboardButton("üéª –ê–Ω—Å–∞–º–±–ª—å ‚Äî –£–¥–∞—Ä–Ω—ã–µ", callback_data='admin_price_ensemble_percussion')],
        [InlineKeyboardButton("üéª –ê–Ω—Å–∞–º–±–ª—å ‚Äî –°—Ç—Ä—É–Ω–Ω—ã–µ", callback_data='admin_price_ensemble_strings')],
        [InlineKeyboardButton("üéª –ê–Ω—Å–∞–º–±–ª—å ‚Äî –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ", callback_data='admin_price_ensemble_piano')],
        [InlineKeyboardButton("üéª –ê–Ω—Å–∞–º–±–ª—å ‚Äî –í–æ–∫–∞–ª", callback_data='admin_price_ensemble_vocal')],
        [InlineKeyboardButton("üéª –ê–Ω—Å–∞–º–±–ª—å ‚Äî –ú–∏–∫—Å", callback_data='admin_price_ensemble_mix')],
    ]
    keyboard.append([InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data='admin_back')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:",
        reply_markup=reply_markup
    )


# --- –ê–¥–º–∏–Ω: –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é ---
async def admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_back –≤—ã–∑–≤–∞–Ω")
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π", callback_data='admin_view_bookings')],
        [InlineKeyboardButton("‚ûï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –æ–ø–ª–∞—Ç—ã", callback_data='admin_create_booking')],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data='admin_change_price')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


# --- –ê–¥–º–∏–Ω: –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ü–µ–Ω—É ---
async def admin_set_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    print(f"üî• [DEBUG] admin_set_price –≤—ã–∑–≤–∞–Ω. data='{query.data}'")
    await query.answer()

    data = query.data
    spec, dir = data.replace('admin_price_', '').split('_')
    context.user_data['price_spec'] = spec
    context.user_data['price_dir'] = dir

    current_price = get_price(spec, dir)
    await query.edit_message_text(
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} ‚ÇΩ\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 900):\n\n"
        f"üí° –ü—Ä–∏–º–µ—Ä: 1200"
    )
    return WAIT_PRICE_INPUT


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã ---
async def handle_price_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"üî• [DEBUG] handle_price_input –≤—ã–∑–≤–∞–Ω. –¢–µ–∫—Å—Ç: '{update.message.text}'")
    try:
        new_price = float(update.message.text.strip())
        if new_price < 0:
            raise ValueError
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 900)")
        return WAIT_PRICE_INPUT

    spec = context.user_data['price_spec']
    dir = context.user_data['price_dir']

    print(f"üîß [DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É: spec='{spec}', dir='{dir}', price={new_price}")

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        INSERT OR REPLACE INTO prices (specialization, direction, price)
        VALUES (?, ?, ?)
    ''', (spec, dir, new_price))
    conn.commit()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    c.execute('SELECT price FROM prices WHERE specialization = ? AND direction = ?', (spec, dir))
    row = c.fetchone()
    actual_price = row[0]
    print(f"‚úÖ [DEBUG] –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {actual_price}")
    conn.close()

    await update.message.reply_text(
        f"‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
        f"{spec} | {dir}: {actual_price} ‚ÇΩ"
    )

    # –í–µ—Ä–Ω—ë–º –≤ –∞–¥–º–∏–Ω–∫—É
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –±—Ä–æ–Ω–µ–π", callback_data='admin_view_bookings')],
        [InlineKeyboardButton("‚ûï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –æ–ø–ª–∞—Ç—ã", callback_data='admin_create_booking')],
        [InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data='admin_change_price')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

    return ConversationHandler.END


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(select_specialization, pattern='^select_spec$')],
        states={
            SELECT_SPECIALIZATION: [
                CallbackQueryHandler(select_direction, pattern=r'^spec_'),
                CallbackQueryHandler(select_specialization, pattern='^select_spec$'),
            ],
            SELECT_DIRECTION: [
                CallbackQueryHandler(select_instrument, pattern=r'^dir_'),
            ],
            SELECT_INSTRUMENT: [
                CallbackQueryHandler(handle_instrument_choice, pattern=r'^inst_'),
            ],
            SELECT_DATE: [
                CallbackQueryHandler(handle_date_choice, pattern=r'^date_'),
                CallbackQueryHandler(select_date, pattern=r'^back_to_dir$'),
            ],
            SELECT_TIME: [
                CallbackQueryHandler(handle_time_choice, pattern=r'^time_'),
                CallbackQueryHandler(select_date, pattern=r'^back_to_dates$'),
            ],
            CONFIRM_BOOKING: [
                CallbackQueryHandler(confirm_payment, pattern='^confirm_payment$'),
                CallbackQueryHandler(cancel_booking, pattern='^cancel_booking$'),
            ],

            ADMIN_SELECT_SPEC: [
                CallbackQueryHandler(admin_select_direction, pattern=r'^admin_spec_'),
            ],
            ADMIN_SELECT_DIR: [
                CallbackQueryHandler(admin_select_instrument, pattern=r'^admin_dir_'),
            ],
            ADMIN_SELECT_INSTRUMENT: [
                CallbackQueryHandler(admin_handle_instrument_choice, pattern=r'^admin_inst_'),
            ],
            ADMIN_SELECT_DATE: [
                CallbackQueryHandler(admin_handle_date_choice, pattern=r'^admin_date_'),
                CallbackQueryHandler(admin_select_date, pattern=r'^admin_back_to_spec$'),
            ],
            ADMIN_SELECT_TIME: [
                CallbackQueryHandler(admin_handle_time_choice, pattern=r'^admin_time_'),
                CallbackQueryHandler(admin_select_date, pattern=r'^admin_back_to_date$'),
            ],
            WAIT_PRICE_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price_input),
            ],
        },
        fallbacks=[
            CommandHandler('start', start),
            CommandHandler('admin', admin_panel),
            CallbackQueryHandler(admin_set_price, pattern=r'^admin_price_'),
        ],
        per_message=False,
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("mybookings", my_bookings))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("admin", admin_panel))

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(admin_view_bookings, pattern='^admin_view_bookings$'))
    app.add_handler(CallbackQueryHandler(admin_start_booking, pattern='^admin_create_booking$'))
    app.add_handler(CallbackQueryHandler(admin_change_price_menu, pattern='^admin_change_price$'))
    app.add_handler(CallbackQueryHandler(admin_back, pattern='^admin_back$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    app.job_queue.run_repeating(cleanup_expired_bookings, interval=300, first=10)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == '__main__':
    main()
